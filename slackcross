#!/bin/bash
# Copyright 2017-2018  Jose Angel Caso Sanchez ASTURIAS  SPAIN
#                      altomaltes@gmail.com
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# rsync lzip python3 patchelf gawk rsync

DESTARCH=${1}

if [ ${DESTARCH} == ${HOSTTYPE} ] ; then
  echo "Not a cross compiler for ${DESTARCH}">&2
  exit 
fi	

PRECOND="lzip patchelf gawk rsync make bash tar gzip find grep diff patch sed xargs chmod chown xz "

for ITEM in ${PRECOND} python3 ; do
  PRG=$( which ${ITEM} 2>/dev/null )
  if [ -n "${PRG}" ] ; then
    echo ${ITEM} found as ${PRG}  >&2
  else
    echo ${ITEM} not found, must install >&2
    exit
  fi
  unset PRG ITEM
done


unset LD_LIBRARY_PATH LIBRARY_PATH CPLUS_INCLUDE_PATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH

MEMORY=$(free | awk '/^Mem:/{print $2}')
WORKERS=" $(( ${MEMORY}/500000 ))"

[ ${WORKERS} > $( nproc ) ] && WORKERS=$(($( nproc ) +1 ))
WORKERS=" -j ${WORKERS} "
WORKERS=4

export LC_ALL="C"
export PREFIX                                  # multiarch generalize
export LIBCTYPE=$(echo $OSTYPE | cut -f2 -d-)

CWD=/tmp/slackroot;        mkdir -p ${CWD}
KITCHEN=${CWD}/kitchen;    mkdir -p ${KITCHEN} 
TOOLSDIR=${KITCHEN}/tools; mkdir -p ${TOOLSDIR}
LOGS=${KITCHEN}/logs;      mkdir -p ${LOGS}

BUILDFOLDER=build-${DESTARCH}-${HOSTTYPE}

echo "">&2
if [ -f "/etc/slackware-version" ] ; then
  echo "Slackware version $(cat /etc/slackware-version ) detected" >&2
  VENDOR=slackware

  SOURCESDIR=/var/cache/source

  if  [ -f "/etc/slackpkg/slackpkg.conf"  ] ; then
    echo "Slackware build environement detected"  >&2
    . /etc/slackpkg/slackpkg.conf
  fi

  EXTDIR=${SOURCESDIR}/legacy
  SRCDIR=${SOURCESDIR}/slackware/source
  VENDOR+='-'      	
  PKGDIR=/var/cache/packages
  PKGHOST=${PKGDIR}/${HOSTTYPE}
  PKGDEST=${PKGDIR}/${DESTARCH}
  PKGEXT='txz'

else
  echo "Generic builder" >&2
  VENDOR=''
  SRCDIR=${CWD}/dl
  EXTDIR=${CWD}/dl
  PKGHOST=${CWD}/out
  PKGDEST=${CWD}/out
  PKGEXT='tar.xz'

fi

mkdir -p ${SRCDIR} ${PKGDIR} ${EXTDIR}

# Seach for source packages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
     BIN=$( echo ${CWD}/dl/binutils-*.*z)   ; [ -f ${BIN}    ] ||    BIN=$( echo ${SRCDIR}/d/binutils/binutils-*.*z)  ; [ -f ${BIN}    ] ||    BIN="binutils-*.*z ( tested binutils-2.30 )"
     GCC=$( echo ${CWD}/dl/gcc-*.*z)        ; [ -f ${GCC}    ] ||    GCC=$( echo ${SRCDIR}/d/gcc/gcc-*.*.*z)          ; [ -f ${GCC}    ] ||    GCC="gcc-*.*z      ( tested gcc-7.5.0     )"
  KERNEL=$( echo ${CWD}/dl/linux-*.*z)      ; [ -f ${KERNEL} ] || KERNEL=$( echo ${SRCDIR}/k/linux-*.*z)              ; [ -f ${KERNEL} ] || KERNEL="linux-*.*z    ( tested linux-4.14.52 )"
   GLIBC=$( echo ${CWD}/dl/glibc-*.tar.*z)  ; [ -f ${GLIBC}  ] ||  GLIBC=$( echo ${SRCDIR}/l/glibc/glibc-*.tar.*z)    ; [ -f ${GLIBC}  ] ||  GLIBC="glibc-*.*z    ( tested glibc-2.30    )"
   MUSLC=$( echo ${CWD}/dl/musl-*.tar.*z)   ; [ -f ${MUSLC}  ] ||  MUSLC=$( echo ${EXTDIR}/l/musl/musl-?.*.*.tar.*z)  ; [ -f ${MUSLC}  ] ||  MUSLC="musl-*.*z     ( tested musl-1.2      )"
#   UCLIB=$( echo ${EXTDIR}/l/uClibc-ng/uClibc-ng-?.*.*.tar.*z) ; [ -f ${UCLIB}  ] ||  UCLIB=$(echo ${CWD}/dl/uClibc-ng-*.tar.*z) ; [ -f ${UCLIB}  ] ||  MUSLC="uClibc-ng-*.*z     ( tested musl-1.2      )"

echo "">&2

for ITEM in BIN GCC KERNEL GLIBC MUSLC; do
  BASE=${ITEM}BASE
  NAME=${ITEM}VERSION

  if [ -f "${!ITEM}" ] ; then
    echo  "${ITEM} found as ${!ITEM} "
    STRIPPED=$( basename ${!ITEM}     | rev | cut -s -d . -f3- | rev )
    declare ${NAME}=$( echo $STRIPPED | rev | cut -s -d - -f1  | rev )
    declare ${BASE}=$( echo $STRIPPED | rev | cut -s -d - -f2- | rev ) 
  else
    echo "No ${!ITEM} sources found on ${SRCDIR}/? or ${CWD}/dl">&2
    VENDOR='none'  # used as flag
  fi

done

echo "">&2

if [ "${VENDOR}" == "none" ] ; then
  echo "Download required sources to ${CWD}/dl or mount the slackware source tree over ${SRCDIR}">&2
  exit 1
fi

# Get the target flags  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

ARCHES='
  armv5l armv6l armv7l mips mipsel mips64 mips64el
  x86_64 i586 i486 sparc64
  powerpc powerpc64 powerpc64le
  microblaze microblazeel
  sh4 sh4eb  or1k csky
  riscv64 riscv32
  hppa alpha'

function getGccFlags()
{ GCCCONF=""; case ${1} in

  aarch64) CFLAGS_FOR_TARGET=" -fPIC -DPIC -mcpu=cortex-a53  "
           GCCCONF=" --with-arch=armv8-a --with-abi=lp64 --with-cpu=cortex-a53  "
        ;;

   armv5l) CFLAGS_FOR_TARGET=" -fPIC -DPIC -march=armv5te -msoft-float "
           GCCCONF="--with-arch=armv5te --with-tune=arm926ej-s --with-float=soft --with-mode=arm --with-abi=aapcs-linux"
        ;;

   armv6l) CFLAGS_FOR_TARGET=" -fPIC -DPIC -march=armv6zk -mhard-float "
           GCCCONF=" --with-arch=armv6zk --with-tune=arm1176jzf-s --with-fpu=vfp --with-mode=arm --with-float=hard --with-abi=aapcs-linux"
        ;;

   armv7l) CFLAGS_FOR_TARGET=" -fPIC -DPIC -march=armv7-a -mfpu=vfpv3-d16 -mhard-float "
           GCCCONF=" --with-mode=thumb --with-float=hard --with-pic --with-abi=aapcs-linux  --with-arch=armv7-a --with-fpu=vfpv3-d16"
        ;;

mips|mipsel) CFLAGS_FOR_TARGET=" -fPIC -DPIC  -mhard-float -march=mips32r2 "
             GCCCONF=" --with-arch=mips32r2 --with-abi=32  --with-float=hard "
        ;;

mips64|mips64el) CFLAGS_FOR_TARGET="  -fPIC -DPIC -march=mips3 "
	         GCCCONF="  --with-arch=mips3 --with-tune=mips64 --with-mips-plt --with-float=soft --with-abi=64  "
        ;;

   x86_64) CFLAGS_FOR_TARGET=" -fPIC -DPIC "
           GCCCONF=""
        ;;

     i486) CFLAGS_FOR_TARGET="-march=i486 -mtune=generic"
           GCCCONF="--with-arch=i486 --with-tune=generic --enable-cld"
        ;;

     i586) CFLAGS_FOR_TARGET="-march=i686 -mtune=generic"
           GCCCONF="--with-arch=i586 --with-tune=generic --enable-cld"
        ;;

      sparc) CFLAGS_FOR_TARGET=" -mcpu=v9 "
             GCCCONF="  --with-cpu=v9 "
      ;;

    sparc64) CFLAGS_FOR_TARGET=" -mcpu=ultrasparc "
             GCCCONF="--with-cpu=ultrasparc"
          ;;

    powerpc) GCCCONF="  --with-cpu=7400  --enable-secureplt --enable-decimal-float=no "
             CFLAGS_FOR_TARGET="  -fPIC -DPIC "
          ;;

  powerpc64) GCCCONF="  --with-cpu=powerpc64  --with-float=hard --with-abi=elfv2 --enable-secureplt --enable-decimal-float=no --enable-targets=powerpcle-linux,powerpc-linux"
             CFLAGS_FOR_TARGET=" -mcpu=powerpc64 -mhard-float -fPIC -DPIC "
          ;;

 powerpc64le) GCCCONF=" --with-cpu=power8  --with-long-double-128 "
              CFLAGS_FOR_TARGET=" -mcpu=power8 -Os -fno-lto "
           ;;

microblaze|microblazeel)
              GCCCONF="   "
              CFLAGS_FOR_TARGET="  "
           ;;

         sh4|sh4eb|or1k|csky|hppa|alpha)
              GCCCONF="   "
              CFLAGS_FOR_TARGET="  "
           ;;

    riscv32) GCCCONF=" --with-arch=rv32imafd  "
             CFLAGS_FOR_TARGET=" -march=rv32imafd"
          ;;

    riscv64) GCCCONF=" --with-arch=rv64imafd --with-abi=lp64d --enable-autolink-libatomic"
             CFLAGS_FOR_TARGET=" -march=rv64imafd -fPIC -DPIC "
          ;;

        all)
              for ITEM in ${ARCHES} ; do   		
                ${0} ${ITEM}		       
              done 		      

              echo "${ARCHES}" built
              exit	      
          ;;	  


         *) echo "You must define an architecture ( ${ARCHES} )" >&2;
            exit 1
          ;;

  esac
}

##
#   Build flags for both build and target
#
getGccFlags ${HOSTTYPE}
CFLAGS_FOR_BUILD=${CFLAGS_FOR_TARGET}

HOSTCONF=${GCCCONF}
getGccFlags ${DESTARCH}



#
#  Emerge ABI's ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Arrange flags for host builder
#
HOSTABI=$( echo ${OSTYPE} | rev | cut -d - -f 1 | rev );
HOSTLANG=",ada";

ABI=""; MUSARCH="${DESTARCH}"; GNUARCH="${DESTARCH}"; PREFIX=${DESTARCH}; case "${DESTARCH}" in
         *86) KERNELARCH="i386"      ; PREFIX=i386                                ;;
      armv7*) KERNELARCH="arm"       ; PREFIX=arm;      ABI=eabihf; MUSARCH=armhf ;;
       armv*) KERNELARCH="arm"       ; PREFIX=arm;      ABI=eabi  ; MUSARCH=arm   ;;
     aarch64) KERNELARCH="arm64"     ; ;;
        mips) KERNELARCH="mips"      ; ;;
      mipsel) KERNELARCH="mips"      ; ;;
      mips64) KERNELARCH="mips"      ; PREFIX=mips64;   ABI=eabi64;;
    mips64el) KERNELARCH="mips"      ; PREFIX=mips64el; ABI=eabi64;;
       nios2) KERNELARCH="nios2"     ;                              MUSARCH=""        ;;
     powerpc) KERNELARCH="powerpc"   ; ;;
   powerpc64) KERNELARCH="powerpc"   ;                              MUSARCH=powerpc64 ;;
 powerpc64le) KERNELARCH="powerpc"   ;                              MUSARCH="" ;;
     riscv64) KERNELARCH="riscv"     ; ;;
     riscv32) KERNELARCH="riscv"     ;                              MUSARCH=""  ;;  # no musl support
        or1k) KERNELARCH="openrisc"  ;              GNUARCH=""  ;;
      sparc*) KERNELARCH="sparc"                                    MUSARCH=""  ;;
        csky) KERNELARCH="csky"      ;   ABI=abiv2; MUSARCH=""  ;;
        sh4*) KERNELARCH="sh"        ; ;;
        hppa) KERNELARCH="parisc"    ;                              MUSARCH="" ;;
       alpha) KERNELARCH="alpha"     ;                              MUSARCH="" ;;
 microblaze*) KERNELARCH="microblaze";                              GNUARCH="" ;;

           *) KERNELARCH=${DESTARCH} ;;
esac


#  Order is important 
#

[ -n "${GNUARCH}" ] && LIBCLIST+="gnu "
[ -n "${MUSARCH}" ] && LIBCLIST+="musl"
[ -n "${UCLARCH}" ] && LIBCLIST+="uclibc"

case "${DESTARCH}" in
     riscv32) LANGUAGES="c,c++,d,fortran,jit,lto,objc,obj-c++,ada"         ;;
        *86*) LANGUAGES="c,c++,d,fortran,jit,lto,objc,obj-c++,ada,go,brig" ;;
     mips64*) LANGUAGES="c,c++,d,fortran,jit,lto,objc,obj-c++,ada"         ;;
 microblaze*) LANGUAGES="c,c++,d,jit,lto,objc,obj-c++"                     ;;
  csky|or1k*) LANGUAGES="c,c++,d,jit,lto,objc,obj-c++"                     ;;
       hppa*) LANGUAGES="c,c++,d,fortran,jit,lto,objc,obj-c++,ada"         ;;
           *) LANGUAGES="c,c++,d,fortran,jit,lto,objc,obj-c++,go,ada"      ;; 
esac

  HOST="${HOSTTYPE}-${VENDOR}linux-${HOSTABI}"
TARGET="${DESTARCH}-${VENDOR}linux-gnu${ABI}"
 MUSLT="${DESTARCH}-${VENDOR}linux-musl${ABI}"
UCLIBT="${DESTARCH}-${VENDOR}linux-uclibc${ABI}"

#
# Formally name the required packages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


getAbi()
{ case "${1}" in
    armv7*) echo eabihf ;;
     armv*) echo eabi   ;;
    mips64) echo eabi64 ;;
  mips64el) echo eabi64 ;;
      csky) echo abiv2  ;;
  esac	
}

if [ -x "$( which makepkg )" ] ; then

  PKGBINAR=${PKGHOST}/d
  PKG_C_BR=${PKGHOST}/d
  PKG_C_GN=${PKGHOST}/d
  PKG_C_ML=${PKGHOST}/d
  PKG_C_UC=${PKGHOST}/d

  PKGLINUX=${PKGDIR}/noarch/k
  PKGGLIBC=${PKGDIR}/noarch/l
  PKGMUSLC=${PKGDIR}/noarch/l
  PKGUCLIB=${PKGDIR}/noarch/l


  makePkg()
  { if [ -e "${1}" ]; then
      echo "${1} yet created from ${2}">&2
    else
      cd ${2} || exit 3
      if [ -f "${3}" ] ; then     
        mkdir ${2}/install/ ; cp ${3} ${2}/install/slack-desc
      fi	
      echo "Stripping ${2}">&2
      find . | xargs file | grep "executable"    | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
      find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
      echo "Creating ${1} from ${2}">&2
      find . -type l | tar -cf ../backup-links.tar -T -
        makepkg -l y -c n "${1}"
      tar -xf ../backup-links.tar
      cd -
    fi
  }
else
  PKGBINAR=${PKGHOST}
  PKG_C_BR=${PKGHOST}
  PKG_C_GN=${PKGHOST}
  PKG_C_ML=${PKGHOST}

  PKGLINUX=${PKGDEST}
  PKGGLIBC=${PKGDEST}
  PKGMUSLC=${PKGDEST}
  PKGUCLIB=${PKGDEST}

  makePkg()
  { if [ -e "${1}" ]; then
      echo "${1} yet created from ${INSTPKG}">&2
    else
      cd ${INSTPKG};
      echo "Stripping ${INSTPKG}">&2
      find . | xargs file | grep "executable"    | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
      find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
      echo "Creating ${1} from ${INSTPKG}">&2
      tar -cf "${1}" .
      cd -
    fi
  }

fi

for ITEM in  PKGBINAR  PKG_C_GN PKG_C_BR PKG_C_ML PKG_C_UC PKGLINUX PKGGLIBC PKGMUSLC PKGUCLIB; do
  mkdir -p ${!ITEM}
done

case "${DESTARCH}" in
  riscv32) LIBWIDE=lib32/ilp32d;;
  riscv64) LIBWIDE=lib64/lp64d;;
     *64*) LIBWIDE=lib64;;
        *) LIBWIDE=lib;;
esac

PKGBINAR+=/cross-bin-${DESTARCH}-${BINVERSION}-${HOSTTYPE}-0.${PKGEXT}
PKG_C_BR+=/cross-gcc-${DESTARCH}+elf-${GCCVERSION}-${HOSTTYPE}-0.${PKGEXT}
PKG_C_GN+=/cross-gcc-${DESTARCH}+gnu-${GCCVERSION}-${HOSTTYPE}-0.${PKGEXT}
PKG_C_ML+=/cross-gcc-${DESTARCH}+musl-${GCCVERSION}-${HOSTTYPE}-0.${PKGEXT}
PKG_C_UC+=/cross-gcc-${DESTARCH}+uclibc-${GCCVERSION}-${HOSTTYPE}-0.${PKGEXT}

PKGLINUX+=/linux-headers-${KERNELVERSION}-${KERNELARCH}-0.${PKGEXT}
PKGGLIBC+=/cross-glibc-${GLIBCVERSION}-${DESTARCH}-0.${PKGEXT}
PKGMUSLC+=/cross-musl-${MUSLCVERSION}-${DESTARCH}-0.${PKGEXT}
PKGUCLIB+=/cross-uclibc-${UCLIBVERSION}-${DESTARCH}-0.${PKGEXT}

GCCCONF+=' --disable-nls '

echo "">&2
echo "/====================================== SUMMARY  =====================================">&2
echo "| ">&2
echo "|     BIN: ${BINVERSION}        GCC: ${GCCVERSION}" >&2 
echo "|  KERNEL: ${KERNELVERSION}   GLIBC: ${GLIBCVERSION}      MUSL: ${MUSLCVERSION}" >&2
echo "| ">&2
echo "|    TARGET: ${DESTARCH} ">&2
echo "|     FLAGS: ${CFLAGS_FOR_TARGET} ">&2
echo "| FOR BUILD: ${CFLAGS_FOR_BUILD} ">&2
echo "|       GCC: ${GCCCONF} ">&2
echo "| FOR BUILD: ${HOSTCONF} ">&2
echo "| ">&2
echo "| LANGUAGES: ${LANGUAGES}">&2
echo "|   WORKERS: ${WORKERS} KITCHEN: ${KITCHEN}">&2
echo "| ">&2
#                        echo "|       BIN: ${TARGET}">&2
#[ -n "${UCLARCH}" ] && echo "|    UCLIBC: ${UCLIBT}">&2
#echo "|   BUILD: ${BUILD}">&2
                        echo "|      HOST: ${HOST}">&2
echo "| ">&2
[ -n "${GNUARCH}"  ] && echo "|       GNU: ${TARGET}">&2
[ -n "${MUSARCH}"  ] && echo "|      MUSL: ${MUSLT}">&2
echo "| ">&2

                         [ -f ${PKGBINAR} ] && PRESENT='*' || PRESENT='' ; echo "|   BINUTILS: ${PKGBINAR}  ${PRESENT} ">&2
echo "| ">&2
                         [ -f ${PKGLINUX} ] && PRESENT='*' || PRESENT='' ; echo "| HDRS  PACK: ${PKGLINUX} ${PRESENT}  ">&2
[ -n "${GNUARCH}" ] && ( [ -f ${PKGGLIBC} ] && PRESENT='*' || PRESENT='' ; echo "| LIBC  PACK: ${PKGGLIBC} ${PRESENT}  ">&2 )
[ -n "${MUSARCH}" ] && ( [ -f ${PKGMUSLC} ] && PRESENT='*' || PRESENT='' ; echo "| MUSL  PACK: ${PKGMUSLC} ${PRESENT}  ">&2 )
[ -n "${UCLARCH}" ] && ( [ -f ${PKGUCLIB} ] && PRESENT='*' || PRESENT='' ; echo "| UCLIB PACK: ${PKGUCLIB} ${PRESENT}  ">&2 )
echo "| ">&2
#                         [ -f ${PKG_C_BR} ] && PRESENT='*' || PRESENT='' ; echo "|  GCC  BARE: ${PKG_C_BR} ${PRESENT}  ">&2
[ -n "${GNUARCH}" ] && ( [ -f ${PKG_C_GN} ] && PRESENT='*' || PRESENT='' ; echo "|  GCC   GNU: ${PKG_C_GN} ${PRESENT}  ">&2 )
[ -n "${MUSARCH}" ] && ( [ -f ${PKG_C_ML} ] && PRESENT='*' || PRESENT='' ; echo "|  GCC  MUSL: ${PKG_C_ML} ${PRESENT}  ">&2 )
[ -n "${UCLARCH}" ] && ( [ -f ${PKG_C_UC} ] && PRESENT='*' || PRESENT='' ; echo "|  GCC UCLIB: ${PKG_C_UC} ${PRESENT}  ">&2 )
echo "| ">&2
echo "/=====================================================================================">&2

PATH=${TOOLSDIR}/bin:/usr/bin:/bin:/sbin:/usr/${MACHTYPE}/bin:${KITCHEN}/bootstrap/bin
BINUTILS="as ld ar ranlib nm objcopy objdump readelf size strip strings"


# Extract Neded sources ( and patch gcc once untarred), ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
cd ${CWD}; for ITEM in BIN GCC KERNEL GLIBC MUSLC; do
  NAME=${ITEM}BASE
  TARFILE=${!ITEM}
  declare ${NAME}=$(echo $( basename ${TARFILE} | cut -s -d - -f2 | rev | cut -d . -f 3- | rev )); VERSION=${!NAME}
  declare ${NAME}=$(echo $( basename ${TARFILE} | cut -s -d - -f1 )); BASE=${!NAME}; FOLDER=${BASE}-${VERSION}

  SORCESFOLDER=$( dirname ${TARFILE})

  if [ -d "${FOLDER}" ] ; then
    echo "${BASE} ${VERSION} yet expanded">&2
  else
    if [ -f "${TARFILE}" ]; then
      echo "Expanding ${BASE} ${VERSION}">&2
      tar -xf ${TARFILE}

      echo "Apliying slackware patches">&2
      cd ${CWD}/${BASE}-${VERSION}
        for ITEM in ${SOURCESFILDER}/patches/*.*.gz  ; do   
          if [ -f ${ITEM} ] ; then	  
            echo apliying patch ${ITEM} over $PWD
            zcat ${ITEM} | patch -p1 
          fi    
        done  
      cd -	
      echo "Applied">&2

  #    echo "Rgistering slackware description">&2
  #    cp ${SORCESFOLDER}/slack-desc         ${CWD}/${BASE}-${VERSION}/slack-desc 
  #    cp ${SORCESFOLDER}/slack-desc.${BASE} ${CWD}/${BASE}-${VERSION}/slack-desc 

      case ${BASE} in
        musl)
          cd ${CWD}/${BASE}-${VERSION}
          sed -e '/#define _SCHED_H/a #define _GNU_SOURCE /* JACS, musl needs this to bootstrap */' -i ${CWD}/${BASE}-${VERSION}/include/sched.h    # musl needs this ( only inline macros )
        ;;

        gcc)
#   Make possible to have default linker and assembler in another place that build machine
# In a cross compiling, the build machine has not the alien linker in place, generally.
# Another option is to taint the root filesystem.
#
          cd  ${CWD}/${BASE}-${VERSION}/gcc/
      # v 7.5     gcc/ada/gcc-interface/Makefile.in # From me
            sed -i 's\linux-gnueabi\linux\'  ada/Makefile.rtl || exit 45 # From me

            for ITEM in $( find config/ -name "t*-*" ); do
              sed -e 's#../lib64#.#' \
                  -e 's|call if_multiarch,||g' \
                  -e 's|MULTILIB_DIRNAMES|MULTILIB_DIRNAMES_WIPED|g' \
                  -e 's#-linux-gnu#-linux-$(LIBCTYPE)#g' \
                  -i ${ITEM} || exit 45 # from linuxfromscratch, more or less

              if [ "$( grep MULTIARCH_DIRNAME ${ITEM} )" == "" ] ; then
                echo 'MULTIARCH_DIRNAME = $(PREFIX)-linux-$(LIBCTYPE)' >> ${ITEM}
              fi
            done
#
# Same thing: ( 2-> avoid fixincludes, from linux from scratch )
#
#               -e 's@\./fixinc\.sh@-c true@' \
#                -e 's/LIMITS_H_TEST =.*/LIMITS_H_TEST =true/g' \

            sed -e 's|if \$(MULTILIB_OSDIRNAMES),,\$(MULTIARCH_DIRNAME)|PREFIX)-linux-\$(LIBCTYPE|' \
                -e 's|$(MULTIARCH_DIRNAME)|$(PREFIX)-linux-$(LIBCTYPE)|' \
                -e 's|PREPROCESSOR_DEFINES =|PREPROCESSOR_DEFINES = -DARCHPREFIX=\\\"$(LIBDIRPREFIX)\\\" |' \
                -e 's#gcc.o += $(DRIVER_DEFINES)#gcc.o += -DSTANDARD_STARTFILE_PREFIX_1=\\\"/usr/lib$(LIBDIRPREFIX)/\\\" -DSTANDARD_STARTFILE_PREFIX_2=\\\"/lib$(LIBDIRPREFIX)/\\\" $(DRIVER_DEFINES)#' \
                -i Makefile.in || exit 45

# From: Andreas Schwab <schwab at suse dot de>
#
            sed -e 's|IN_LIBGCC2|USED_FOR_TARGET|g' -i config/nios2/nios2.h || exit 45

# GCC stubbornness
#
            sed -e 's/test ! -x "$DEFAULT_LINKER"/false/' -e 's/test ! -x "$DEFAULT_ASSEMBLER"/false/' -i configure || exit 45

# sh4 does not get multiarch
#            sed -e 's|INCLUDE_DEFAULTS|INCLUDE_DEFAULTS_JACS|' \
#                -i cppdefault.c || exit 45

# ortogonalize include path
#
            sed -e 's|INCLUDE_DEFAULTS|INCLUDE_DEFAULTS_JACS|' \
                -e 's|LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 2|LOCAL_INCLUDE_DIR ARCHPREFIX, 0, 0, 1, 1, 0|' \
                -e 's|NATIVE_SYSTEM_HEADER_DIR, NATIVE_SYSTEM_HEADER_COMPONENT, 0, 0, 1, 2|NATIVE_SYSTEM_HEADER_DIR ARCHPREFIX, NATIVE_SYSTEM_HEADER_COMPONENT, 0, 0, 1, 0|' \
                -i cppdefault.c || exit 45

# mips64 is hard coded, normalize it
#
            sed -e 's|STANDARD_STARTFILE_PREFIX_1|STANDARD_STARTFILE_PREFIX_1_WIPED|g' \
                -e 's|STANDARD_STARTFILE_PREFIX_2|STANDARD_STARTFILE_PREFIX_2_WIPED|g' \
                -i config/mips/mips.h || exit 45

          cd -

# Allow one time compile ( versions unde 9 )
#
         sed -e '/M_DEPS =/d' \
             -i ${CWD}/${BASE}-${VERSION}/libatomic/Makefile.in || exit 52

# Breaks native builds built as crossed
#
          cd ${FOLDER}/libdecnumber
             ln -s dpd no || exit 5
          cd -
        ;;
      esac
    fi
  fi
done

#  Generate triplet compatible names ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
GNATX="gnat gnatbind gnatchop gnatclean gnatfind gnatkr gnatlink gnatls gnatmake gnatname gnatprep gnatxref"
PATCHELF=$(  which patchelf )
INTERPRETER=$(  ${PATCHELF} --print-interpreter ${PATCHELF} )

if [ -d "${TOOLSDIR}/bin" ] ; then
  echo "Tripleted binaries yet generated on ${TOOLSDIR}/bin">&2
else
  echo "Generating Tripleted binaries on  ${TOOLSDIR}/bin">&2
#  mkdir -p ${TOOLSDIR}/bin; cd ${TOOLSDIR}/bin
#

  mkdir ${TOOLSDIR}/bin; cd ${TOOLSDIR}/bin
    for FILE in ld as ar gcc-ar gcc g++ c++ nm gcc-nm objcopy objdump ranlib gcc-ranlib readelf strip cpp ${GNATX} strings patchelf; do
      DEST=$( which ${HOSTTYPE}-*-linux-${HOSTABI}-${FILE} 2>/dev/null )
      [ -n "${DEST}" ] || DEST=$( which ${FILE}            2>/dev/null )

      if [ -e "${DEST}"  ] ; then
        ln -sf "${DEST}" ${HOST}-${FILE} 2>/dev/null
        echo "Using ${DEST} as ${HOST}-${FILE}"
      else
        echo "/usr/bin/${FILE} non usable as ${HOST}-${FILE}"
      fi
    done

# Extract and copy  mixed chroot environement libraries needed
#
  mkdir -p ${KITCHEN}/lib
  for FILE in cc1 ar ; do
    for ITEM in  $(  ldd  $( ${HOST}-gcc --print-prog-name  ${FILE} )  | grep '=>' | cut -d ' ' -f3 ) $(  ldd  ${PATCHELF}  | grep '=>' | cut -d ' ' -f3 ) ${INTERPRETER} ; do
      echo $FILE -- ${ITEM}
      cp ${ITEM} ${KITCHEN}/lib
    done
  done
fi

INTERPRETER=${KITCHEN}/lib/$( basename ${INTERPRETER} )


DOCCONF='
  --disable-gtk-doc
  --disable-gtk-doc-html
  --disable-doc
  --disable-docs
  --disable-documentation
  --disable-debug
  --with-xmlto=no --with-fop=no
  --disable-nls --disable-dependency-tracking --disable-option-checking
  --with-bugurl=https://github.com/altomaltes/crossbootstrap
  --disable-debug  
'

GCCCONF+="
 ${DOCCONF}
 --enable-plugins
 --enable-lto
 --disable-bootstrap

"

ORGDIRPREFIX=`${HOST}-gcc -print-file-name=libc.a`
ORGDIRPREFIX=`dirname  ${ORGDIRPREFIX}`
ORGDIRPREFIX=`realpath ${ORGDIRPREFIX} |  sed -e 's|/usr||' | sed -e 's|/lib||' `

WORKERS="-j ${WORKERS}"


#echo "SETPOINT 1 b $ORGDIRPREFIX">&2 ; exit
#
# Build native versioned gcc. Ada needs this ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
cd ${CWD}; if [ -x "${TOOLSDIR}/bin/${HOST}-gcc" ] &&  [ ! -L "${TOOLSDIR}/bin/${HOST}-gcc" ] ; then
  echo "base gcc ${GCCVERSION} ${TOOLSDIR}/bin/${HOST}- yet preinstalled over ${INSTPKG}">&2
else
  if [ -f "gcc-${GCCVERSION}/native-build/gcc/gnat" ] ; then
    cd "gcc-${GCCVERSION}/native-build"
  else
    mkdir "gcc-${GCCVERSION}/native-build"
    cd    "gcc-${GCCVERSION}/native-build"
    echo "Configuring base GCC for ${TOOLSDIR} in ${PWD} ">&2

#
    CFLAGS="${CFLAGS_FOR_BUILD}"   \
  CXXFLAGS="${CFLAGS_FOR_BUILD}"   \
     ../configure ${HOSTCONF} -prefix=${TOOLSDIR} \
        --build=${HOST} --host=${HOST} --target=${HOST} \
        --libdir=${TOOLSDIR}/lib/${ORGDIRPREFIX}                      \
        --with-gxx-include-dir=/${TOOLSDIR}/include/c++/${GCCVERSION} \
        --enable-languages=c,c++${HOSTLANG} \
        --with-ld=${TOOLSDIR}/bin/${HOST}-ld              \
        --with-as=${TOOLSDIR}/bin/${HOST}-as              \
        --without-isl                                      \
        --enable-checking=no                               \
        --disable-multilib --disable-multiarch \
        --disable-libquadmath --disable-libquadmath-support \
        --disable-libunwind-exceptions       \
        --enable-__cxa_atexit                \
        --disable-install-libiberty          \
        --with-linker-hash-style=gnu         \
        --disable-install-libiberty          \
        --disable-gtktest                    \
        --without-cloog                      \
        --disable-decimal-float              \
        --disable-debug                  \
        --disable-libstdcxx-pch          \
        --disable-threads                \
        --enable-clocale=gnu             \
        --disable-gtk-doc --disable-gtk-doc-html \
        --disable-doc --disable-docs --disable-documentation \
        --disable-debug --with-xmlto=no --with-fop=no \
        --disable-nls \
        --disable-libsanitizer --with-sysroot="/" > ${LOGS}/gcc.native.config.log || exit 5
    echo "Building versioned gcc for ${HOSTTYPE} ">&2
    make ${WORKERS} LIBDIRPREFIX=${ORGDIRPREFIX} > ${LOGS}/gcc.native.make.log  || make V=1 LIBDIRPREFIX=${ORGDIRPREFIX} || exit 1
  fi
  echo "Installing host (${HOSTTYPE}) VERSIONED GCC">&2
  make install >gcc.native.install.log  || exit 14

  cd ${TOOLSDIR}/bin/
  echo $PATH
    for ITEM in $( ls gnat* ); do
      ln -sf ${ITEM} ${HOST}-${ITEM} 
    done
  cd -
fi


#echo "SETPOINT 2">&2 ; exit

# Build target binutils ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
for LIBCTYPE in bare ; do
#  TGTBIN=$( echo ${TARGET} | sed -e 's/microblazebe/microblaze/' )
  TGTBIN=${TARGET}
  INSTPKG=${KITCHEN}/${TGTBIN}/binutils
  DISTPKG=${PKGBINAR}
  LPREFIX=${PREFIX}-linux

  cd ${CWD}; if [ -x "${INSTPKG}/usr/bin/${TGTBIN}-ld" ] ; then
    echo "cross binutils ${BINVERSION} for ${TGTBIN} yet installed on ${KITCHEN}/crossbin ${INSTPKG}/usr/bin/${TGTBIN}-ld">&2
  else
    if [ -f "binutils-${BINVERSION}/build-${DESTARCH}/Makefile" ] ; then
      cd "binutils-${BINVERSION}/build-${DESTARCH}" || exit 5
    else
      mkdir "binutils-${BINVERSION}/build-${DESTARCH}"
      cd    "binutils-${BINVERSION}/build-${DESTARCH}"
      echo "Configuring target BIN for ${TGTBIN} ">&2
       ../configure  CFLAGS="${CFLAGS_FOR_BUILD}" CXX_FLAGS="${CFLAGS_FOR_BUILD}" \
         --prefix=/usr  --build=${HOST} --host=${HOST} --target=${TGTBIN} \
         ${DOCCONF}  \
         --with-pkgversion="Slackware 15.1 Cross Compiler Suite" \
         --libdir=/usr/lib/${LPREFIX}  \
         --with-gnu-ld                 \
         --with-gnu-as                 \
         --disable-gtk-doc --disable-gtk-doc-html --disable-doc --disable-docs --disable-documentation  \
         --with-xmlto=no               \
         --disable-debug               \
         --disable-nls                 \
         --enable-poison-directories   \
         --enable-static --enable-shared \
         --with-lib-path=/usr/local/lib/${LPREFIX}:/usr/lib/${LPREFIX}:/lib/${LPREFIX} \
         --with-build-time-tools=${TOOLSDIR}/bin > ${LOGS}/binutils.${TGTBIN}.config.log || exit 6
      echo "Building ${TGTBIN} BINUTILS with lib ${LPREFIX} over ${HOST} build system">&2
      make ${WORKERS} > ${LOGS}/binutils.${TGTBIN}.make.log  || make V=1 ||  exit 13
    fi

    echo "Installing target cross ${TGTBIN} BINUTILS">&2
    rm -rf ${INSTPKG}
    make DESTDIR=${INSTPKG} install > ${LOGS}/binutils.${TGTBIN}.install.log || exit 22

# make aliases
#
    cd  ${INSTPKG}/usr/bin/

      for FILE  in $( ls  ); do
        ITEM=$( echo ${FILE} | rev | cut -f1 -d '-' | rev )	      
        mv ${FILE} ../${TGTBIN}/bin/${ITEM}  2>/dev/null
      done	      
      
      for FILE  in $( ls ../${TGTBIN}/bin ); do
        if [ ! -d ${ITEM} ] ; then
          ITEM=$( echo ${FILE} | rev | cut -f1 -d '-' | rev )
          for LIB in gnu musl ; do 
	    ln -sf ../${TGTBIN}/bin/${FILE} ${TARGET}-${ITEM}
	    ln -sf ../${TGTBIN}/bin/${FILE} ${MUSLT}-${ITEM}
          done 
        fi
      done

    cd -

# Create the recently built package
#
    echo "Creating cross bin ${DISTPKG} package on ${INSTPKG} ">&2
    makePkg ${DISTPKG} ${INSTPKG} $( dirname ${BIN} )/slack-desc

#  Give access to current build
#
    echo "Giving access to temporary located utils to its libs">&2
    cd ${INSTPKG}/usr/bin/
      if [ "${HOST}" == "${TGTBIN}" ] ; then
        FOLDER=${INSTPKG}/usr/lib/${LPREFIX}
      else
        FOLDER=${INSTPKG}/usr/${HOST}/${TGTBIN}/lib:${INSTPKG}/usr/lib/${LPREFIX}:${KITCHEN}/lib
      fi
      for ITEM in $( ls  ); do
        ${PATCHELF} --set-rpath       ${FOLDER}      ${ITEM}
        ${PATCHELF} --set-interpreter ${INTERPRETER} ${ITEM}
      done
    cd -

    cd  ${TOOLSDIR}/bin 
      for ITEM in $( ls ${INSTPKG}/usr/bin/ ); do
        ln -sf ${INSTPKG}/usr/bin/${ITEM}  
      done
    cd -

  fi

done  

#echo "SETPOINT 3 ${KITCHEN}/lib">&2 ; exit

# Build glibc BOOTSTRAP GCC HOST ( No GLIBC ) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#      --with-gnu-ld --with-ld=${TOOLSDIR}/bin/${TARGET}-ld \
#      --with-gnu-as --with-as=${TOOLSDIR}/bin/${TARGET}-as \

ELFTGT=${TARGET}
MAKEADDFLAGS="LIBDIRPREFIX=/${PREFIX}-linux-${LIBCTYPE}${ABI}"
INSTPKG=${KITCHEN}/${DESTARCH}/finale/elf

cd ${CWD}; if [ -f "${INSTPKG}/usr/lib/gcc/${ELFTGT}/${GCCVERSION}/libgcc.a" ] ; then
  echo "cross bootstrap GCC for ${ELFTGT} yet installed on ${TOOLSDIR} ${INSTPKG}/usr/lib/gcc/${ELFTGT}/${GCCVERSION}/libgcc.a">&2
else
  if [ -f "gcc-${GCCVERSION}/${BUILDFOLDER}/Makefile" ] ; then
    echo "GCC BOOTSTRAP for ${ELFTGT} yet configured ... ">&2
    cd "gcc-${GCCVERSION}/${BUILDFOLDER}"
  else
    mkdir "gcc-${GCCVERSION}/${BUILDFOLDER}";
    cd    "gcc-${GCCVERSION}/${BUILDFOLDER}"
    echo "Configuring GCC BOOTSTRAP for ${ELFTGT} ... ">&2
      ../configure ${GCCCONF} \
        --host=${HOST} --build=${HOST} --target=${ELFTGT} \
        --prefix=/usr          \
        --with-gnu-ld --with-ld=${TOOLSDIR}/bin/${ELFTGT}-ld \
        --with-gnu-as --with-as=${TOOLSDIR}/bin/${ELFTGT}-as \
        --enable-languages=c                     \
        --disable-libquadmath --disable-libquadmath-support \
        --with-newlib --without-headers                        \
        --disable-largefile                      \
        --disable-debug                          \
        --disable-nls                            \
        --disable-libunwind-exceptions           \
        --disable-shared                         \
        --disable-threads                        \
        --disable-libgomp                        \
        --disable-libmpx                         \
        --disable-libvtv                         \
        --disable-libstdcxx                      \
        --disable-install-libiberty              \
        --enable-__cxa_atexit --disable-libssp   \
        --disable-decimal-float                  \
        --without-zstd                           \
        --disable-libmpx                         \
        --disable-libquadmath --disable-libquadmath-support \
        --disable-libsanitizer --enable-tls      \
        --without-isl  --without-cloog           \
        --with-build-time-tools=${TOOLSDIR}/bin \
        --disable-multilib --disable-multiarch  > ${LOGS}/gcc.${ELFTGT}.config.log || exit 5
  fi

  echo "Building BOOTSTRAP HOST from ${HOSTTYPE} to ${ELFTGT} ">&2
  make ${MAKEADDFLAGS} ${WORKERS} all-gcc all-target-libgcc > ${LOGS}/gcc.${ELFTGT}.make.log || make ${MAKEADDFLAGS} V=1 all-gcc all-target-libgcc  || exit 2

  echo "Installing BOOTSTRAP gcc from ${HOST} to ${ELFTGT} into ${INSTPKG}  ">&2
  make DESTDIR=${INSTPKG} install-gcc install-target-libgcc  >  ${LOGS}/gcc.${ELFTGT}.install.log ||  make DESTDIR=${INSTPKG}  V=1 install-gcc install-target-libgcc || exit 12 > /dev/null

##
#  Add legacy executable names
#
  cd ${INSTPKG}/usr/libexec/gcc/${ELFTGT}/${GCCVERSION}/
    for ITEM in ${BINUTILS}; do
      ln -sf ../../../../bin/${ELFTGT}-${ITEM} ${ITEM}
      ln -sf ../../../../bin/${ELFTGT}-${ITEM}
    done
  cd -

#  cd ${INSTPKG}
#    makePkg ${PKG_C_BR} ${INSTPKG}
#  cd -

##
#  Add boostrapping
#
#  cd ${INSTPKG}/usr/bin
#    for ITEM in ${BINUTILS}; do
#      ln -sf ${TOOLSDIR}/bin/${ELFTGT}-${ITEM}
#    done
#  cd -
  cd  ${TOOLSDIR}/bin/
#    for ITEM in c++ cpp g++ gcc ; do
    for ITEM in cpp gcc ; do
      ln -sf ${INSTPKG}/usr/bin/${ELFTGT}-${ITEM} ${TARGET}-${ITEM} 
      ln -sf ${INSTPKG}/usr/bin/${ELFTGT}-${ITEM} ${MUSLT}-${ITEM} 
      ln -sf ${INSTPKG}/usr/bin/${ELFTGT}-${ITEM} ${ELFTGT}-${ITEM} 
    done
  cd -

fi

# echo "SETPOINT 4">&2 ; exit


#
# Install KERNEL HEADERS, keep in mind multiarch and multiarch features ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
cd ${CWD}; INSTPKG=${KITCHEN}/${KERNELARCH}/linux
#if [ -f "${PKGLINUX}" ] ; then   # Not created, about to create
if [ -f "${KITCHEN}/${KERNELARCH}/linux/usr/include/linux-${KERNELARCH}/linux/version.h" ] ; then   # Not created, about to create
  echo "Kernel headers package created over ${INSTPKG} ">&2
else
  echo "Installing linux ${KERNELVERSION} ${KERNELARCH} over ${INSTPKG}">&2
  cd  "linux-${KERNELVERSION}"
    rm -rf ${INSTPKG}
          make HOSTCC=${TOOLSDIR}/bin/${HOST}-gcc \
        CROSS_COMPILE=${TOOLSDIR}/bin/${TARGET}- \
                 ARCH=${KERNELARCH} \
    INSTALL_HDR_PATH=${INSTPKG}/usr/include/incoming headers_install > ${LOGS}/linux.${KERNELARCH}.log || exit 123
  # You won't want these files. The ones in libdrm work better. (From  Volkerding)
    rm -rf drm
    find  ${INSTPKG} -name ".install"      | xargs rm
    find  ${INSTPKG} -name "..install.cmd" | xargs rm
    mkdir                                           ${INSTPKG}/usr/include/linux-${KERNELARCH}/
    mv    ${INSTPKG}/usr/include/incoming/include/* ${INSTPKG}/usr/include/linux-${KERNELARCH}/
    rmdir ${INSTPKG}/usr/include/incoming/include
    rmdir ${INSTPKG}/usr/include/incoming/

    echo "Creating cross kernel headers for ${KERNELARCH} ${PKGLINUX} package on ${INSTPKG} ">&2
    makePkg ${PKGLINUX} ${INSTPKG}  $( dirname ${KERNEL} )/slack-desc.gcc/slack-desc/slack-desc.kernel-headers
  cd -
fi

#echo "SETPOINT 5">&2 ; exit

#
#   Build glibc  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# includes will be installed on /usr/${TARGET}/include for cross purposes
# links to /usr/include/linux-${ARCH}/??? because these are shared among tuples
#
        #--enable-kernel=${KERNELVERSION} \
      #  --enable-obsolete-nsl        \
      #  --enable-obsolete-rpc        \

cd ${CWD}; if [ -n "${GNUARCH}" ] ; then
  INSTPKG=${KITCHEN}/${DESTARCH}/gnu
  cd ${CWD}; if [ -d "${INSTPKG}/usr"   ] ; then # Not created, about to create
    echo "glibc ${PKGGLIBC} package created from ${INSTPKG} ">&2
  else
    mkdir -p "glibc-${GLIBCVERSION}/${BUILDFOLDER}"; cd "glibc-${GLIBCVERSION}/${BUILDFOLDER}"
    if [ -z "$( grep 'exit 0' config.log )" ] ; then # not sussesfull configuration
      echo "Configuring GLIBC ${GLIBCVERSION} ...">&2
      ac_cv_prog_OBJCOPY=${TARGET}-objcopy \
      ac_cv_prog_OBJDUMP=${TARGET}-objdump \
      CFLAGS=" --sysroot=${INSTPKG} ${CFLAGS_FOR_TARGET} -O2 " \
      ../configure ${DOCCONF} \
          --with-pkgversion="Slackware 15.1 Cross Compiler Suite" \
          --build=${HOST} --host=${TARGET} --target=${TARGET} --prefix=/usr --exec-prefix=/usr/${PREFIX}-linux-gnu${ABI}  \
          --with-gnu-ld --with-ld=${TOOLSDIR}/bin/${BIBTGT}-ld \
          --with-gnu-as --with-as=${TOOLSDIR}/bin/${BIBTGT}-as \
          --with-headers=${KITCHEN}/${KERNELARCH}/linux/usr/include/linux-${KERNELARCH}  \
          --libdir=/usr/lib/${PREFIX}-linux-gnu${ABI} \
          --datarootdir=/usr/share/${PREFIX}-linux-gnu${ABI} \
          --enable-kernel=4.4.0 \
          --disable-werror --without-gd \
          --with-fp                    \
          --enable-add-ons             \
          --disable-profile            \
          --with-tls                   \
          --with-__thread              \
          --without-cvs                \
          --with-build-time-tools=${KITCHEN}/tools/bin   > ${LOGS}/glibc.${TARGET}.config.log  || exit 5
    fi      

    echo "Building GLIBC ${GLIBCVERSION} for ${TARGET} in ${PWD}" >&2
    make ${WORKERS} > ${LOGS}/gcc.${TARGET}.make.log || make V=1;
    echo "Installing GLIBC ${GLIBCVERSION} on ${INSTPKG}" >&2
    rm -rf ${INSTPKG}; make DESTDIR=${INSTPKG} install > ${LOGS}/glibc.${TARGET}.install.log || exit 1

# JACS, move stuff in /lib, and link unroll not honoring libdirsuffix
#
  
    mkdir                    -p ${INSTPKG}/lib/${PREFIX}-linux-gnu${ABI} 2>/dev/null
    mv ${INSTPKG}/lib/ld*       ${INSTPKG}/lib/${PREFIX}-linux-gnu${ABI} 2>/dev/null
    mv ${INSTPKG}/${LIBWIDE}/*  ${INSTPKG}/lib/${PREFIX}-linux-gnu${ABI} 2>/dev/null && rmdir ${INSTPKG}/${LIBWIDE}  2>/dev/null

# retarget symbolic links
#
    cd  ${INSTPKG}/usr/lib/${PREFIX}-linux-gnu${ABI}
      for ITM in $( readlink * ) ; do
        DST=$( echo ${ITM} | rev | cut -d / -f 1  | rev )
        SRC=$( echo ${DST} | rev | cut -d . -f 2- | rev )
        ln -sf ../../../lib/${PREFIX}-linux-gnu${ABI}/${DST} ${SRC}
      done
    cd -
     
   cd ${INSTPKG}/lib/${PREFIX}-linux-gnu${ABI} 
      for SRC in $( find . -type l ) ; do
        ln -sf $( readlink ${SRC} | rev | cut -d / -f 1  | rev ) ${SRC}
      done
    cd -


# retarget library libraries
#
    cd  ${INSTPKG}/usr/lib/${PREFIX}-linux-gnu${ABI}
      for ITEM in $( ls  ${INSTPKG}/usr/lib/${PREFIX}-linux-gnu${ABI}/lib*.so ) ; do
        BASE=$(basename ${ITEM})
        if [ "$( file -b ${BASE} )" == "ASCII text" ]; then
           sed -e "s#/${LIBWIDE}/#/lib/#g" -i ${BASE}                               # riscv64 not orthogonal
           sed   -e "s#/lib/lib#/lib/${PREFIX}-linux-gnu${ABI}/lib#g" \
              -e "s#/lib/ld#/lib/${PREFIX}-linux-gnu${ABI}/ld#g" \
              -e '/^OUTPUT_FORMAT/i /* Troubles linker (JACS) ' \
              -e '/^OUTPUT_FORMAT/a  */ ' \
              -i ${BASE}
         else
           [ -h ${BASE} ] && ln -sf ../../../lib/${PREFIX}-linux-gnu${ABI}/${BASE}.*  ${BASE}
         fi
      done
    cd -

# Do not taint the root filesystem
#
    mv   ${INSTPKG}/etc  ${INSTPKG}/usr/${TARGET}/
    mv   ${INSTPKG}/sbin ${INSTPKG}/usr/${TARGET}/
    mv   ${INSTPKG}/var  ${INSTPKG}/usr/${TARGET}/

# Add multiarch support
#
    mv    ${INSTPKG}/usr/include ${INSTPKG}/${PREFIX}-linux-gnu${ABI}        # allow cross scheme
    mkdir ${INSTPKG}/usr/include
    mv    ${INSTPKG}/${PREFIX}-linux-gnu${ABI} ${INSTPKG}/usr/include/

    cd  ${INSTPKG}/usr/include/${PREFIX}-linux-gnu${ABI}
     for ITEM in asm asm-generic drm linux misc mtd rdma sound video xen  ; do
          ls ${INSTPKG}/usr/include/${PREFIX}-linux-gnu${ABI}/${ITEM}
          mv ${ITEM} ${ITEM}.glibc 2>/dev/null
          ln -sf ../linux-${KERNELARCH}/${ITEM}
      done
    cd -

#   Save symlinks removed for makePkg for temporal build
# and restore it once packager ends
#
    cd ${INSTPKG}
      makePkg ${PKGGLIBC} ${INSTPKG} $( dirname ${GLIBC} )/slack-desc.glibc
    cd -

    cd ${INSTPKG}/usr/include/${PREFIX}-linux-gnu${ABI}
      for ITEM in $( ls -d ${KITCHEN}/${KERNELARCH}/linux/usr/include/linux-${KERNELARCH}/* ) ; do
       ln -sf ${ITEM}
      done
    cd -
  fi

# Cleanup 
#
#  rm -rf "${CWD}/glibc-${GLIBCVERSION}/${BUILDFOLDER}"
#echo    ${KITCHEN}/${KERNELARCH}/linux/usr/include/linux-${KERNELARCH}/ 
#echo    ${INSTPKG}/usr/include/${PREFIX}-linux-gnu${ABI}

fi

#echo "SETPOINT 6">&2 ; exit


#
#   Build muslc  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

cd ${CWD}; if [ -n "${MUSARCH}" ] ; then
  INSTPKG=${KITCHEN}/${DESTARCH}/musl/
  if [ -d "${INSTPKG}/usr/include" ] ; then # Not created, about to create
    echo "mulsc ${PKGMUSLC} package created from ${INSTPKG} ">&2
  else
    if [ -e "musl-${MUSLCVERSION}/${BUILDFOLDER}/lib/libc.a" ] ; then
      echo "musl ${MUSLCVERSION} yet built">&2
    else
      echo "Configuring musl ${MUSLCVERSION}">&2
      mkdir musl-${MUSLCVERSION}/${BUILDFOLDER}
      cd "musl-${MUSLCVERSION}/${BUILDFOLDER}"
      CC=${TARGET}-gcc \
      CROSS_COMPILE=${ELFTGT}- \
      CFLAGS=${CFLAGS_FOR_TARGET} \
      ../configure  --target=${MUSLT} --host=${MUSLT} --build=${HOST} --prefix=/usr  \
        --libdir=usr/lib/${PREFIX}-linux-musl${ABI} \
        --exec-prefix=/usr/${MUSLT}  \
        --includedir=usr/include/${PREFIX}-linux-musl${ABI} > ${LOGS}/libc.${MUSLT}.config.log || exit 16

      echo "Building musl ${MUSLCVERSION}">&2
      make ${WORKERS}  > ${LOGS}/libc.${MUSLT}.make.log  || exit 17
      echo "Installing musl ${MUSLCVERSION}">&2
      rm -rf ${INSTPKG}; make DESTDIR=${INSTPKG} install  > ${LOGS}/libc.${MUSLT}.install.log

#
# Add linux support
#
      cd    ${INSTPKG}/usr/include/${PREFIX}-linux-musl${ABI}
      for ITEM in asm asm-generic drm linux misc mtd rdma sound video xen ; do
        mv ${ITEM} ${ITEM}.muslc
        ln -sf ../linux-${KERNELARCH}/${ITEM}
      done

cat << ACEOF >  termio.h
/* Compatible <termio.h> for old `struct termio' ioctl interface.
   This is obsolete; use the POSIX.1 `struct termios' interface
   defined in <termios.h> instead.  */

#include <termios.h>
#include <sys/ioctl.h>

ACEOF

      cd -

      mkdir${INSTPKG}/lib; cd ${INSTPKG}/lib
        ln -sf ../usr/lib/${PREFIX}-linux-musl${ABI}/libc.so ld-musl-${MUSARCH}.so.1
      cd -

      mkdir  ${INSTPKG}/etc/ ; echo "" > ${INSTPKG}/etc/ld-musl-${MUSARCH}.path

      for ITEM in /usr/local/ /usr/ / ; do
        echo ${ITEM}/lib/${PREFIX}-linux-musl${ABI}  >> ${INSTPKG}/etc/ld-musl-${MUSARCH}.path
      done

#
# Symlinks for kitchen build
#
      cd ${INSTPKG}
	makePkg ${PKGMUSLC} ${INSTPKG}  $( dirname ${MUSL} )/slack-desc
      cd -

      cd ${INSTPKG}/usr/include/${PREFIX}-linux-musl${ABI}
        for ITEM in $( ls -d ${KITCHEN}/${KERNELARCH}/linux/usr/include/linux-${KERNELARCH}/* ) ; do
          ln -sf ${ITEM}
        done
      cd -
    fi
  fi
fi

#echo "SETPOINT 7">&2 ; exit

#
# Build UCLIBC
#

#cd ${CWD};
#if [ -n "${UCLARCH}" ] ; then
#  INSTPKG=${KITCHEN}/${DESTARCH}/uclibc/
#  if [ -d "${INSTPKG}/usr/include" ] ; then # Not created, about to create
#    echo "uclibc ${PKGUCLIB} package created from ${INSTPKG} ">&2
#  else
#    if [ -e "${UCLIBBASE}-${UCLIBVERSION}/${BUILDFOLDER}/lib/libc.a" ] ; then
#      echo "uclibc ${UCLIBVERSION} yet built">&2
#    else
#      echo "Configuring uclibc ${UCLIBVERSION}">&2
#      mkdir ${UCLIBBASE}-${UCLIBVERSION}
#      cd "${UCLIBBASE}-${UCLIBVERSION}"
#        make defconfig
#
#    #    sed -i '\|^TARGET_x86_64|d' -i  .config  # delete default arch
#    #    sed -i "s|^TARGET_x86_64|TARGET_${UCLARCH}|" -i  .config  # delete default arch
#
#     #    sed -i "s|x86_64|${UCLARCH}|g" -i  .config  # delete default arch
#         sed -i 's|TARGET_x86_64=y|# TARGET_x86_64 is not set|'       -i  .config
#         sed -i "s|# TARGET_${UCLARCH} is not set|TARGET_${UCLARCH}=y|" -i  .config
#         sed -i "s|TARGET_ARCH=\"x86_64\"|TARGET_ARCH=\"${UCLARCH}\"|"  -i  .config
#         sed -i 's|TARGET_LDSO_NAME="ld64-uClibc"|TARGET_LDSO_NAME="ld-uClibc"|'  -i  .config
#
#         echo 'CONFIG_AARCH64_PAGE_SIZE_4K=y'            >> .config
#         echo '# CONFIG_AARCH64_PAGE_SIZE_16K is not set' >> .config
#         echo '# CONFIG_AARCH64_PAGE_SIZE_64K is not set' >> .config
#         echo 'ARCH_LITTLE_ENDIAN=y' >> .config
#         echo '# ARCH_WANTS_BIG_ENDIAN is not set' >> .config
#         echo 'ARCH_WANTS_LITTLE_ENDIAN=y' >> .config
#
#         cp config.aarch64 .config
#         sed -i "s|KERNEL_HEADERS=\"\"|KERNEL_HEADERS=\"${KITCHEN}/${KERNELARCH}/linux/usr/include/linux-${KERNELARCH}\"|"  -i  .config
#
#         make oldconfig
#         make clean CROSS_COMPILE=${TARGET}-
#     #   CFLAGS=${CFLAGS_FOR_TARGET}
#         make  CROSS_COMPILE=${TARGET}-
#        echo $PWD
#      cd -
#    fi
#  fi
#fi
#
#echo "SETPOINT UCLIBC ${UCLIBVERSION}">&2 ; exit


#--with-build-sysroot=${STEMP} --with-sysroot=/ --with-native-system-header-dir=/usr/include/${LIBDIRPREFIX} \

# Build GCC Finale ( same as boostrap plus glibc ) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
for LIBCTYPE in ${LIBCLIST} ; do

  case ${LIBCTYPE} in
       musl) DISTPKG=${PKG_C_ML} ; 
             LANGUAGES=$( echo ${LANGUAGES} | sed -e 's|,go,|,|' -e 's|,d,|,|' ) 
             LANGUAGES+=' --enable-clocale=newlib '
          ;;  # d and go must be heavily patched under musl

        gnu) DISTPKG=${PKG_C_GN} ;;
     uclibc) DISTPKG=${PKG_C_UC} ;;
  esac

        STEMP=${KITCHEN}/${DESTARCH}/${LIBCTYPE}/
      INSTPKG=${KITCHEN}/${DESTARCH}/finale/${LIBCTYPE}
    GCCTARGET=${DESTARCH}-${VENDOR}linux-${LIBCTYPE}${ABI}

  if [ ! -e "${DISTPKG}" ] ; then # Not created, about to create
    cd ${CWD}; if [ -x "${INSTPKG}/bin/${GCCTARGET}-gcc" ] ; then
      echo "cross gcc finale for ${DESTARCH} yet installed">&2
    else
      if [ -f "gcc-${GCCVERSION}/finale/${GCCTARGET}/gcc/Makefile" ] ; then # previous sussesfull configuration
        cd "gcc-${GCCVERSION}/finale/${GCCTARGET}"
        echo "GCC for ${GCCTARGET} finale yet configured ... "
      else
        echo "Configuring GCC for ${GCCTARGET} finale ... "
        mkdir -p "gcc-${GCCVERSION}/finale/${GCCTARGET}"
        cd "gcc-${GCCVERSION}/finale/${GCCTARGET}"
        export CXXCPP=${HOST}-cpp  # build flaw. c++ preprocessor not needed at all, but required sanity
        export    CPP=${HOST}-cpp 
        CXXFLAGS_FOR_TARGET=${CFLAGS_FOR_TARGET}${CXXFLAGS_FOR_TARGET} \
        ../../configure ${GCCCONF}  --host=${HOST} --build=${HOST} --target=${GCCTARGET}  \
            --with-pkgversion="Slackware 15.1 Cross Compiler Suite" \
            --enable-languages=${LANGUAGES} \
            --prefix=/usr --enable-rpath  \
            --with-build-sysroot=${STEMP} --with-sysroot=/ \
            --libdir=/usr/lib/${PREFIX}-linux-${LIBCTYPE}${ABI} \
            --with-gnu-ld --with-ld=${TOOLSDIR}/bin/${GCCTARGET}-ld \
            --with-gnu-as --with-as=${TOOLSDIR}/bin/${GCCTARGET}-as \
            --enable-threads \
            --disable-werror \
            --enable-libquadmath --enable-libquadmath-support \
            --disable-libunwind-exceptions       \
            --with-system-zlib                   \
            --disable-decimal-float              \
            --disable-libmudflap                 \
            --disable-install-libiberty          \
            --disable-multilib --enable-multiarch \
	    --enable-static --enable-shared --enable-host-shared  \
            --without-isl                                      \
            --disable-libsanitizer --disable-gnu-indirect-function --disable-libmpx --enable-libstdcxx-time=rt  --enable-libstdcxx-time  --enable-deterministic-archives \
            --with-build-time-tools=${KITCHEN}/tools/bin \
             >  ${LOGS}/finale.${GCCTARGET}.config.log  || exit 3
      fi
         
      echo "Building GCC FINALE for ${GCCTARGET} finale">&2
      make ${WORKERS} LIBDIRPREFIX=/${PREFIX}-linux-${LIBCTYPE}${ABI}  >  ${LOGS}/finale.${GCCTARGET}.make.log || make || exit 1 
      make            LIBDIRPREFIX=/${PREFIX}-linux-${LIBCTYPE}${ABI}           || exit 1

      echo "Installing GCC FINALE">&2
      rm -rf ${INSTPKG}
      make DESTDIR=${INSTPKG} install >  ${LOGS}/finale.${GCCTARGET}.install.log || exit 1

# create aliases
#
      mkdir -p ${INSTPKG}/usr/${GCCTARGET}/bin; cd ${INSTPKG}/usr/${GCCTARGET}/bin
        for ITEM in $( ls ${INSTPKG}/usr/bin ) ; do
          DST=$( echo ${ITEM} | rev | cut -d / -f 1 | rev  |  cut -d - -f4-  )
          ln -sf ../../bin/${ITEM} ${DST} || exit 23  # from linuxfromscratch, more or less
        done
      cd -

# Do not taint the native rootfs
#
      mv  ${INSTPKG}/usr/share  ${INSTPKG}/usr/${GCCTARGET}

# give the correct binutils
#
      cd ${INSTPKG}/usr/libexec/gcc/${GCCTARGET}/${GCCVERSION}/
        ln -sf ../../../../bin/${GCCTARGET}-ld real-ld
        for ITEM in as ld ar ranlib nm objcopy objdump readelf size strip strings; do
          ln -sf ../../../../bin/${GCCTARGET}-${ITEM} ${ITEM}
        done
      cd -

##
#  this cross compilation does not nest the same name system includes
#
      for ITEM in ${INSTPKG}/usr/lib/${PREFIX}-linux-${LIBCTYPE}${ABI}/gcc/${GCCTARGET}/${GCCVERSION}/include-fixed/limits.h; do
       sed -e "s|#endif /\* _LIMITS_H___ \*/|#define _GCC_LIMITS_H_ \n#include_next <limits.h>\n\n#endif /* _LIMITS_H_JACS_ */|g" -i ${ITEM} || exit 53
      done

# Move libraries so everybody can use it in a multiarch environement
#
      echo "Move libraries so everybody can use it in a multiarch environement"

      rm ${INSTPKG}/usr/${GCCTARGET}/lib/*.la
      rm ${INSTPKG}/usr/lib/${PREFIX}-linux-${LIBCTYPE}${ABI}/gcc/${GCCTARGET}/${GCCVERSION}/*.la

      cd ${INSTPKG}/usr/lib/${PREFIX}-linux-${LIBCTYPE}${ABI}/gcc/${GCCTARGET}/${GCCVERSION}/

        for ITEM in ${INSTPKG}/usr/${GCCTARGET}/lib/*.{so,a,so.1} *.a ; do
          FILE=$( echo ${ITEM} | rev | cut -f1  -d / | rev )
          mv ${ITEM} ../../../ 
          ln -s      ../../../${FILE}
        done

        mv ${INSTPKG}/usr/${GCCTARGET}/lib/* ${INSTPKG}/usr/lib/${PREFIX}-linux-${LIBCTYPE}${ABI}/
        rmdir ${INSTPKG}/usr/${GCCTARGET}/lib/
      cd -

      echo "Creating cross gcc ${DISTPKG} package for ${DESTARCH}">&2
      makePkg ${DISTPKG} ${INSTPKG}  $( dirname ${GCC} )/slack-desc.gcc
       
    fi

# point to the live binutils
#
    cd ${INSTPKG}/usr/libexec/gcc/${GCCTARGET}/${GCCVERSION}/
      ln -sf ${TOOLSDIR}/bin/${GCCTARGET}-ld real-ld
      for ITEM in as ld ar ranlib nm objcopy objdump readelf size strip strings; do
        ln -sf ${TOOLSDIR}/bin/${GCCTARGET}-${ITEM} ${ITEM}
      done
    cd -

#  give visibility
#
    cd ${TOOLSDIR}/bin
      for ITEM in $( ls ${INSTPKG}/usr/bin/* ); do
        ln -sf ${ITEM}
      done
    cd -


# Cleanup 
#
   rm -rf "${CWD}/gcc-${GCCVERSION}/finale/${GCCTARGET}"

  else
    echo "gcc finale ${DISTPKG} package created from ${INSTPKG} ">&2
  fi

done

echo 
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "~~~          Job done            ~~~"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"


exit 0 




